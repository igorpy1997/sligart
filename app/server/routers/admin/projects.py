# app/server/routers/admin/projects.py - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –û–¢–î–ï–õ–¨–ù–û–ô –¢–ê–ë–õ–ò–¶–ï–ô –§–û–¢–û–ö
from fastapi import APIRouter, HTTPException, Query, Request, Response, UploadFile, File, Depends
from sqlalchemy import select, func
from sqlalchemy.orm import selectinload
from typing import List, Optional
from pydantic import BaseModel
from datetime import datetime
import json

from storages.psql.models.project_model import DBProjectModel
from storages.psql.models.project_photo_model import DBProjectPhotoModel  # –ù–û–í–´–ô –ò–ú–ü–û–†–¢
from services.r2_service import R2Service
from settings import Settings

router = APIRouter(prefix="/projects", tags=["admin-projects"])


# Pydantic —Å—Ö–µ–º—ã - –û–ë–ù–û–í–õ–ï–ù–ù–´–ï
class ProjectResponse(BaseModel):
    id: int
    title: str
    description: Optional[str] = None
    short_description: Optional[str] = None
    demo_url: Optional[str] = None
    github_url: Optional[str] = None
    image_urls: Optional[List[str]] = None  # –¢–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ photos
    status: str
    featured: bool
    project_type: Optional[str] = None
    category: Optional[str] = None
    duration_months: Optional[int] = None
    budget_range: Optional[str] = None
    developer_ids: Optional[List[int]] = None
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True

class ProjectCreate(BaseModel):
    title: str
    description: Optional[str] = None
    short_description: Optional[str] = None
    demo_url: Optional[str] = None
    github_url: Optional[str] = None
    status: str = "draft"
    featured: bool = False
    project_type: Optional[str] = None
    category: Optional[str] = None
    duration_months: Optional[int] = None
    budget_range: Optional[str] = None
    developer_ids: Optional[List[int]] = None

class ProjectUpdate(BaseModel):
    title: Optional[str] = None
    description: Optional[str] = None
    short_description: Optional[str] = None
    demo_url: Optional[str] = None
    github_url: Optional[str] = None
    status: Optional[str] = None
    featured: Optional[bool] = None
    project_type: Optional[str] = None
    category: Optional[str] = None
    duration_months: Optional[int] = None
    budget_range: Optional[str] = None
    developer_ids: Optional[List[int]] = None

def get_r2_service() -> R2Service:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è R2 —Å–µ—Ä–≤–∏—Å–∞"""
    settings = Settings()
    return R2Service(settings)

def project_to_dict(project):
    """Convert project model to dict with developers and photos"""
    # –°–æ–±–∏—Ä–∞–µ–º URL —Ñ–æ—Ç–æ–∫ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    image_urls = [photo.photo_url for photo in project.photos] if project.photos else []

    return {
        "id": project.id,
        "title": project.title,
        "description": project.description,
        "short_description": project.short_description,
        "demo_url": project.demo_url,
        "github_url": project.github_url,
        "image_urls": image_urls,  # –¢–µ–ø–µ—Ä—å –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        "status": project.status,
        "featured": project.featured,
        "project_type": project.project_type,
        "category": project.category,
        "duration_months": project.duration_months,
        "budget_range": project.budget_range,
        "developer_ids": [dev.id for dev in project.developers] if project.developers else [],
        "created_at": project.created_at.isoformat(),
        "updated_at": project.updated_at.isoformat()
    }

@router.get("")
async def get_projects(
        request: Request,
        _start: int = Query(0),
        _end: int = Query(10),
        _sort: str = Query("id"),
        _order: str = Query("ASC"),
        category: Optional[str] = Query(None),
):
    async with request.app.state.db_session() as db:
        # –í–ê–ñ–ù–û: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ selectinload
        query = select(DBProjectModel).options(
            selectinload(DBProjectModel.developers),
            selectinload(DBProjectModel.photos)  # –ó–ê–ì–†–£–ñ–ê–ï–ú –§–û–¢–ö–ò
        )

        if category:
            query = query.where(DBProjectModel.category == category)

        # Sorting
        if hasattr(DBProjectModel, _sort):
            if _order.upper() == "DESC":
                query = query.order_by(getattr(DBProjectModel, _sort).desc())
            else:
                query = query.order_by(getattr(DBProjectModel, _sort))

        # Get total count first
        count_query = select(func.count(DBProjectModel.id))
        if category:
            count_query = count_query.where(DBProjectModel.category == category)
        count_result = await db.execute(count_query)
        total = count_result.scalar()

        # Pagination
        query = query.offset(_start).limit(_end - _start)

        result = await db.execute(query)
        projects = result.scalars().all()

        # Convert to dicts
        projects_data = [project_to_dict(project) for project in projects]

        # Calculate end index for Content-Range
        actual_end = min(_start + len(projects_data) - 1, total - 1) if projects_data else _start - 1

        return Response(
            content=json.dumps(projects_data),
            headers={
                "Content-Range": f"items {_start}-{actual_end}/{total}",
                "Access-Control-Expose-Headers": "Content-Range"
            },
            media_type="application/json"
        )

@router.get("/{project_id}")
async def get_project(project_id: int, request: Request):
    async with request.app.state.db_session() as db:
        query = select(DBProjectModel).options(
            selectinload(DBProjectModel.developers),
            selectinload(DBProjectModel.photos)  # –ó–ê–ì–†–£–ñ–ê–ï–ú –§–û–¢–ö–ò
        ).where(DBProjectModel.id == project_id)
        result = await db.execute(query)
        project = result.scalar_one_or_none()

        if not project:
            raise HTTPException(status_code=404, detail="Project not found")

        return project_to_dict(project)

# –ù–û–í–´–ô –ü–†–û–°–¢–û–ô ENDPOINT –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –§–û–¢–û–ö - –ë–ï–ó –ï–ë–£–ß–ò–• JSON
@router.post("/{project_id}/photos")
async def upload_project_photos(
        project_id: int,
        request: Request,
        photos: List[UploadFile] = File(...),
        r2_service: R2Service = Depends(get_r2_service)
):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –í –û–¢–î–ï–õ–¨–ù–£–Æ –¢–ê–ë–õ–ò–¶–£"""
    async with request.app.state.db_session() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        query = select(DBProjectModel).where(DBProjectModel.id == project_id)
        result = await db.execute(query)
        db_project = result.scalar_one_or_none()

        if not db_project:
            raise HTTPException(status_code=404, detail="Project not found")

        uploaded_urls = []

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π order_index
        max_order_query = select(func.max(DBProjectPhotoModel.order_index)).where(
            DBProjectPhotoModel.project_id == project_id
        )
        max_order_result = await db.execute(max_order_query)
        max_order = max_order_result.scalar() or 0

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ
        for i, photo in enumerate(photos, 1):
            try:
                print(f"üì∏ Uploading photo {i}/{len(photos)}: {photo.filename}")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ R2
                photo_url = await r2_service.upload_project_screenshot(photo, project_id)
                uploaded_urls.append(photo_url)
                print(f"üì∏ UPLOADED: {photo_url}")

                # –°–û–ó–î–ê–ï–ú –ó–ê–ü–ò–°–¨ –í –¢–ê–ë–õ–ò–¶–ï –§–û–¢–û–ö
                db_photo = DBProjectPhotoModel(
                    project_id=project_id,
                    photo_url=photo_url,
                    photo_name=photo.filename,
                    order_index=max_order + i
                )
                db.add(db_photo)
                print(f"üì∏ ADDED TO DB: {photo_url}")

            except Exception as e:
                print(f"Failed to upload photo: {e}")

        # –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–∫–∏
        await db.commit()

        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
        count_query = select(func.count(DBProjectPhotoModel.id)).where(
            DBProjectPhotoModel.project_id == project_id
        )
        count_result = await db.execute(count_query)
        total_photos = count_result.scalar()

        return {
            "message": f"Uploaded {len(uploaded_urls)} photos",
            "uploaded_urls": uploaded_urls,
            "total_images": total_photos
        }

@router.delete("/{project_id}/photos")
async def delete_project_photo(
        project_id: int,
        request: Request,
        photo_url: str = Query(..., description="URL of photo to delete"),
        r2_service: R2Service = Depends(get_r2_service)
):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ–µ–∫—Ç–∞"""
    async with request.app.state.db_session() as db:
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–æ—Ç–æ –≤ –ë–î
        photo_query = select(DBProjectPhotoModel).where(
            DBProjectPhotoModel.project_id == project_id,
            DBProjectPhotoModel.photo_url == photo_url
        )
        photo_result = await db.execute(photo_query)
        db_photo = photo_result.scalar_one_or_none()

        if not db_photo:
            raise HTTPException(status_code=404, detail="Photo not found")

        # –£–¥–∞–ª—è–µ–º –∏–∑ R2
        await r2_service.delete_project_screenshot(photo_url)

        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        await db.delete(db_photo)
        await db.commit()

        # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–æ—Ç–∫–∏
        count_query = select(func.count(DBProjectPhotoModel.id)).where(
            DBProjectPhotoModel.project_id == project_id
        )
        count_result = await db.execute(count_query)
        remaining_photos = count_result.scalar()

        return {
            "message": "Photo deleted successfully",
            "remaining_images": remaining_photos
        }

@router.delete("/{project_id}")
async def delete_project(
        project_id: int,
        request: Request,
        r2_service: R2Service = Depends(get_r2_service)
):
    async with request.app.state.db_session() as db:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å —Ñ–æ—Ç–∫–∞–º–∏
        query = select(DBProjectModel).options(
            selectinload(DBProjectModel.photos)
        ).where(DBProjectModel.id == project_id)
        result = await db.execute(query)
        db_project = result.scalar_one_or_none()

        if not db_project:
            raise HTTPException(status_code=404, detail="Project not found")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ R2
        for photo in db_project.photos:
            await r2_service.delete_project_screenshot(photo.photo_url)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç (—Ñ–æ—Ç–∫–∏ —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ cascade)
        await db.delete(db_project)
        await db.commit()

        return {"message": "Project deleted"}

@router.delete("")
async def delete_many_projects(
        request: Request,
        ids: str = Query(..., description="Comma-separated list of IDs"),
        r2_service: R2Service = Depends(get_r2_service)
):
    """–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    async with request.app.state.db_session() as db:
        try:
            project_ids = [int(id.strip()) for id in ids.split(',')]
        except ValueError:
            raise HTTPException(status_code=400, detail="Invalid IDs format")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å —Ñ–æ—Ç–∫–∞–º–∏
        query = select(DBProjectModel).options(
            selectinload(DBProjectModel.photos)
        ).where(DBProjectModel.id.in_(project_ids))
        result = await db.execute(query)
        projects = result.scalars().all()

        if not projects:
            raise HTTPException(status_code=404, detail="No projects found")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ R2
        for project in projects:
            for photo in project.photos:
                await r2_service.delete_project_screenshot(photo.photo_url)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã (—Ñ–æ—Ç–∫–∏ —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ cascade)
        for project in projects:
            await db.delete(project)

        await db.commit()

        return {
            "message": f"Deleted {len(projects)} projects",
            "deleted_ids": [proj.id for proj in projects]
        }

# ENDPOINTS –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò

@router.get("/categories/list")
async def get_project_categories(request: Request):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    async with request.app.state.db_session() as db:
        query = select(DBProjectModel.category).distinct().where(DBProjectModel.category.is_not(None))
        result = await db.execute(query)
        categories = result.scalars().all()

        return {"categories": categories}

@router.get("/stats/by-category")
async def get_projects_stats_by_category(request: Request):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    async with request.app.state.db_session() as db:
        query = select(
            DBProjectModel.category,
            func.count(DBProjectModel.id).label("count")
        ).group_by(DBProjectModel.category)

        result = await db.execute(query)
        stats = {row.category or "Uncategorized": row.count for row in result}

        return {"by_category": stats}

# CREATE PROJECT
@router.post("")
async def create_project(project: ProjectCreate, request: Request):
    async with request.app.state.db_session() as db:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –ë–ï–ó —Å–≤—è–∑–µ–π
        project_data = project.dict()
        developer_ids = project_data.pop("developer_ids", [])

        db_project = DBProjectModel(**project_data)
        db.add(db_project)
        await db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ raw SQL –∏–ª–∏ insert statements
        if developer_ids:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Table –¥–ª—è –ø—Ä—è–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            from storages.psql.models.project_model import project_developers
            from sqlalchemy import insert

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
            stmt = insert(project_developers).values([
                {"project_id": db_project.id, "developer_id": dev_id}
                for dev_id in developer_ids
            ])
            await db.execute(stmt)

        await db.commit()
        await db.refresh(db_project)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å —Å–≤—è–∑—è–º–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        fresh_query = (
            select(DBProjectModel)
            .options(
                selectinload(DBProjectModel.developers),
                selectinload(DBProjectModel.photos)
            )
            .where(DBProjectModel.id == db_project.id)
        )
        fresh_result = await db.execute(fresh_query)
        fresh_project = fresh_result.scalar_one()

        return project_to_dict(fresh_project)

# UPDATE PROJECT
@router.put("/{project_id}")
async def update_project(project_id: int, project: ProjectUpdate, request: Request):
    async with request.app.state.db_session() as db:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        query = (
            select(DBProjectModel)
            .options(
                selectinload(DBProjectModel.developers),
                selectinload(DBProjectModel.photos)
            )
            .where(DBProjectModel.id == project_id)
        )
        result = await db.execute(query)
        db_project = result.scalar_one_or_none()

        if not db_project:
            raise HTTPException(status_code=404, detail="Project not found")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è
        update_data = project.dict(exclude_unset=True)
        developer_ids = update_data.pop("developer_ids", None)

        for field, value in update_data.items():
            setattr(db_project, field, value)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        if developer_ids is not None:
            from storages.psql.models.project_model import project_developers
            from sqlalchemy import delete, insert

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
            delete_stmt = delete(project_developers).where(
                project_developers.c.project_id == project_id
            )
            await db.execute(delete_stmt)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏
            if developer_ids:
                insert_stmt = insert(project_developers).values([
                    {"project_id": project_id, "developer_id": dev_id}
                    for dev_id in developer_ids
                ])
                await db.execute(insert_stmt)

        await db.commit()

        # –ó–∞–Ω–æ–≤–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
        fresh_query = (
            select(DBProjectModel)
            .options(
                selectinload(DBProjectModel.developers),
                selectinload(DBProjectModel.photos)
            )
            .where(DBProjectModel.id == project_id)
        )
        fresh_result = await db.execute(fresh_query)
        fresh_project = fresh_result.scalar_one()

        return project_to_dict(fresh_project)