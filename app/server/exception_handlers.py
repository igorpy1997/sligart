# app/server/exception_handlers.py
import logging
import json
from fastapi import Request
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException

logger = logging.getLogger(__name__)

async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 422 –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    logger.error(f"üö® VALIDATION ERROR on {request.method} {request.url}")
    logger.error(f"üìç Path params: {request.path_params}")
    logger.error(f"üîç Query params: {dict(request.query_params)}")

    # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    try:
        body = await request.body()
        if body:
            try:
                body_json = json.loads(body.decode())
                logger.error(f"üì¶ Request body: {json.dumps(body_json, indent=2)}")
            except:
                logger.error(f"üì¶ Request body (raw): {body.decode()}")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è Could not read request body: {e}")

    # –ü–æ–¥—Ä–æ–±–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    logger.error("‚ùå Validation errors:")
    for error in exc.errors():
        logger.error(f"  - Field: {error['loc']}")
        logger.error(f"    Message: {error['msg']}")
        logger.error(f"    Type: {error['type']}")
        if 'input' in error:
            logger.error(f"    Input: {error['input']}")

    return JSONResponse(
        status_code=422,
        content={
            "detail": exc.errors(),
            "body": exc.body,
            "message": "Validation failed - check server logs for details"
        }
    )

async def http_exception_handler(request: Request, exc: StarletteHTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è HTTP –æ—à–∏–±–æ–∫"""
    logger.error(f"üö® HTTP ERROR {exc.status_code} on {request.method} {request.url}")
    logger.error(f"üìù Detail: {exc.detail}")

    return JSONResponse(
        status_code=exc.status_code,
        content={
            "detail": exc.detail,
            "status_code": exc.status_code
        }
    )

async def general_exception_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
    logger.error(f"üí• UNHANDLED EXCEPTION on {request.method} {request.url}")
    logger.exception("Full traceback:")

    return JSONResponse(
        status_code=500,
        content={
            "detail": "Internal server error",
            "message": str(exc),
            "type": type(exc).__name__
        }
    )